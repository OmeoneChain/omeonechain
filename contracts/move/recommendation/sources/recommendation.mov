module omeonechain::recommendation {
    use std::error;
    use std::signer;
    use std::string::{Self, String};
    use std::vector;
    
    use omeonechain::common::{Self, ContentHash, IpfsCid, TimeStamp, StorageId, Category, Location};
    use omeonechain::reputation::{Self, ReputationScore, social_distance};
    
    /// Error codes
    const E_RECOMMENDATION_NOT_FOUND: u64 = 101;
    const E_ALREADY_VOTED: u64 = 102;
    const E_CANNOT_VOTE_OWN: u64 = 103;
    const E_NOT_AUTHOR: u64 = 104;
    const E_RECOMMENDATION_ALREADY_EXISTS: u64 = 105;
    
    /// Constants
    const BASE_REWARD_THRESHOLD: u64 = 25; // Trust score must reach 0.25 to trigger reward
    const TRUST_MULTIPLIER_CAP: u64 = 300; // Maximum 3x multiplier for trust bonus
    
    /// Recommendation struct representing a user recommendation
    struct Recommendation has key, store {
        id: StorageId,
        author: address,
        timestamp: TimeStamp,
        service_id: String,
        category: Category,
        location: Location,
        content_hash: ContentHash,
        ipfs_cid: IpfsCid,
        upvotes: vector<address>,
        downvotes: vector<address>,
        trust_score: u64,  // Trust score with 2 decimal precision (e.g., 125 = 1.25)
        trust_weight_sum: u64, // Sum of all trust weights applied (used for reward calculation)
        reward_claimed: bool,
        has_reward_threshold: bool, // Whether recommendation has reached reward threshold
    }
    
    /// RecommendationRegistry to track all recommendations by a user
    struct RecommendationRegistry has key {
        recommendations: vector<StorageId>,
    }
    
    /// Global registry of all recommendations in the system
    struct GlobalRecommendationRegistry has key {
        recommendations: vector<StorageId>,
        last_id: u64,
    }
    
    /// Initialize the recommendation module
    public entry fun initialize(admin: &signer) {
        let admin_addr = signer::address_of(admin);
        assert!(common::is_admin(admin_addr), error::permission_denied(1));
        
        // Create global registry if it doesn't exist
        if (!exists<GlobalRecommendationRegistry>(admin_addr)) {
            move_to(admin, GlobalRecommendationRegistry {
                recommendations: vector::empty<StorageId>(),
                last_id: 0,
            });
        };
    }
    
    /// Create a new recommendation
    public entry fun create_recommendation(
        author: &signer,
        service_id: String,
        category_code: u8,
        latitude: u64,
        longitude: u64,
        is_negative_lat: bool,
        is_negative_long: bool,
        content_hash_bytes: vector<u8>,
        hash_type: u8,
        ipfs_cid: String,
    ) acquires GlobalRecommendationRegistry {
        // Get author address
        let author_addr = signer::address_of(author);
        
        // Create recommendation registry for user if it doesn't exist
        if (!exists<RecommendationRegistry>(author_addr)) {
            move_to(author, RecommendationRegistry {
                recommendations: vector::empty<StorageId>(),
            });
        };
        
        // Generate unique ID
        let global_registry = borrow_global_mut<GlobalRecommendationRegistry>(@omeonechain);
        global_registry.last_id = global_registry.last_id + 1;
        let rec_id = global_registry.last_id;
        
        // Convert numeric ID to string
        let id_string = string::utf8(b"REC");
        string::append(&mut id_string, u64_to_string(rec_id));
        let storage_id = common::create_storage_id(id_string);
        
        // Create content hash, category, location, and timestamp objects
        let content_hash = common::create_content_hash(content_hash_bytes, hash_type);
        let category = common::create_category(category_code);
        let location = common::create_location(latitude, longitude, is_negative_lat, is_negative_long);
        let timestamp = common::create_timestamp();
        let ipfs_cid_obj = common::create_ipfs_cid(ipfs_cid);
        
        // Create and store recommendation
        let recommendation = Recommendation {
            id: storage_id,
            author: author_addr,
            timestamp,
            service_id,
            category,
            location,
            content_hash,
            ipfs_cid: ipfs_cid_obj,
            upvotes: vector::empty<address>(),
            downvotes: vector::empty<address>(),
            trust_score: 0,
            trust_weight_sum: 0,
            reward_claimed: false,
            has_reward_threshold: false,
        };
        
        // Add to global registry
        vector::push_back(&mut global_registry.recommendations, storage_id);
        
        // Store recommendation in global state
        move_to(author, recommendation);
    }
    
    /// Upvote a recommendation
    public entry fun upvote_recommendation(
        voter: &signer, 
        recommendation_id: String
    ) acquires Recommendation, GlobalRecommendationRegistry {
        let voter_addr = signer::address_of(voter);
        
        // Verify recommendation exists
        let rec_id = common::create_storage_id(recommendation_id);
        let (exists, owner_addr) = find_recommendation(&rec_id);
        assert!(exists, error::not_found(E_RECOMMENDATION_NOT_FOUND));
        
        // Get recommendation
        let recommendation = borrow_global_mut<Recommendation>(owner_addr);
        
        // Check if voter is not the author
        assert!(recommendation.author != voter_addr, error::invalid_state(E_CANNOT_VOTE_OWN));
        
        // Check if voter has already voted
        assert!(!has_voted(recommendation, voter_addr), error::invalid_state(E_ALREADY_VOTED));
        
        // Get voter's reputation
        let voter_rep = reputation::get_reputation_score(voter_addr);
        
        // Calculate social distance and trust weight
        let social_dist = social_distance(voter_addr, recommendation.author);
        let trust_weight = calculate_trust_weight(social_dist, voter_rep);
        
        // Add upvote
        vector::push_back(&mut recommendation.upvotes, voter_addr);
        
        // Update trust score
        update_trust_score(recommendation);
        
        // Update trust weight sum
        recommendation.trust_weight_sum = recommendation.trust_weight_sum + trust_weight;
        
        // Check if recommendation now meets threshold for rewards
        if (!recommendation.has_reward_threshold && recommendation.trust_score >= BASE_REWARD_THRESHOLD) {
            recommendation.has_reward_threshold = true;
            // Trigger reward calculation - would call token module in full implementation
        }
    }
    
    /// Downvote a recommendation
    public entry fun downvote_recommendation(
        voter: &signer, 
        recommendation_id: String
    ) acquires Recommendation, GlobalRecommendationRegistry {
        let voter_addr = signer::address_of(voter);
        
        // Verify recommendation exists
        let rec_id = common::create_storage_id(recommendation_id);
        let (exists, owner_addr) = find_recommendation(&rec_id);
        assert!(exists, error::not_found(E_RECOMMENDATION_NOT_FOUND));
        
        // Get recommendation
        let recommendation = borrow_global_mut<Recommendation>(owner_addr);
        
        // Check if voter is not the author
        assert!(recommendation.author != voter_addr, error::invalid_state(E_CANNOT_VOTE_OWN));
        
        // Check if voter has already voted
        assert!(!has_voted(recommendation, voter_addr), error::invalid_state(E_ALREADY_VOTED));
        
        // Add downvote
        vector::push_back(&mut recommendation.downvotes, voter_addr);
        
        // Update trust score
        update_trust_score(recommendation);
    }
    
    /// Calculate trust weight based on social distance and reputation
    fun calculate_trust_weight(social_dist: u8, voter_rep: &ReputationScore): u64 {
        let base_weight = if (social_dist == 1) {
            common::DIRECT_FOLLOWER_WEIGHT
        } else if (social_dist == 2) {
            common::INDIRECT_FOLLOWER_WEIGHT
        } else {
            common::MIN_TRUST_WEIGHT
        };
        
        // Apply reputation modifier
        let rep_factor = reputation::get_trust_modifier(voter_rep);
        base_weight * rep_factor / 100 // Normalize by dividing by 100
    }
    
    /// Update trust score for a recommendation based on votes
    fun update_trust_score(recommendation: &mut Recommendation) {
        let upvote_count = vector::length(&recommendation.upvotes);
        let downvote_count = vector::length(&recommendation.downvotes);
        
        if (upvote_count == 0 && downvote_count == 0) {
            recommendation.trust_score = 0;
            return
        };
        
        // Calculate ratio of upvotes
        let total_votes = upvote_count + downvote_count;
        let upvote_ratio = (upvote_count * 100) / total_votes;
        
        // Apply volume factor (square root of total votes, capped)
        let volume_factor = if (total_votes > 100) {
            10 // Cap at 10x for 100+ votes
        } else {
            // Simplified approximation of square root factor
            let sqrt_factor = if (total_votes < 4) { total_votes } else if (total_votes < 9) { 2 + (total_votes / 4) } else { 3 + (total_votes / 9) };
            sqrt_factor
        };
        
        // Calculate trust score (upvote_ratio * volume_factor)
        let raw_score = upvote_ratio * volume_factor;
        
        // Cap at max trust score (10.00) 
        if (raw_score > common::MAX_TRUST_SCORE) {
            recommendation.trust_score = common::MAX_TRUST_SCORE;
        } else {
            recommendation.trust_score = raw_score;
        }
    }
    
    /// Check if a user has already voted on a recommendation
    fun has_voted(recommendation: &Recommendation, voter: address): bool {
        vector::contains(&recommendation.upvotes, &voter) || 
        vector::contains(&recommendation.downvotes, &voter)
    }
    
    /// Find a recommendation by ID
    fun find_recommendation(id: &StorageId): (bool, address) acquires GlobalRecommendationRegistry {
        let global_registry = borrow_global<GlobalRecommendationRegistry>(@omeonechain);
        let i = 0;
        let len = vector::length(&global_registry.recommendations);
        
        while (i < len) {
            let rec_id = vector::borrow(&global_registry.recommendations, i);
            if (common::get_id_string(rec_id) == common::get_id_string(id)) {
                // In a real implementation, we would look up the owner from an index
                // For simplicity, we're just returning the module owner address here
                return (true, @omeonechain)
            };
            i = i + 1;
        };
        
        (false, @0x0)
    }
    
    /// Get recommendation by ID (public view)
    public fun get_recommendation(id: String): (bool, address, String, u64, u64, u64, String) acquires Recommendation, GlobalRecommendationRegistry {
        let rec_id = common::create_storage_id(id);
        let (exists, owner) = find_recommendation(&rec_id);
        
        if (!exists) {
            return (false, @0x0, string::utf8(b""), 0, 0, 0, string::utf8(b""))
        };
        
        let recommendation = borrow_global<Recommendation>(owner);
        let upvotes = vector::length(&recommendation.upvotes);
        let downvotes = vector::length(&recommendation.downvotes);
        
        (
            true,
            recommendation.author,
            recommendation.service_id,
            recommendation.trust_score,
            upvotes,
            downvotes,
            common::get_cid_string(&recommendation.ipfs_cid)
        )
    }
    
    /// Calculate reward for a recommendation
    public fun calculate_reward_multiplier(id: String): u64 acquires Recommendation, GlobalRecommendationRegistry {
        let rec_id = common::create_storage_id(id);
        let (exists, owner) = find_recommendation(&rec_id);
        
        if (!exists) {
            return 0
        };
        
        let recommendation = borrow_global<Recommendation>(owner);
        
        // No reward if threshold not met
        if (!recommendation.has_reward_threshold) {
            return 0
        };
        
        // Cap the multiplier at TRUST_MULTIPLIER_CAP (3.00)
        if (recommendation.trust_weight_sum > TRUST_MULTIPLIER_CAP) {
            return TRUST_MULTIPLIER_CAP
        } else {
            return recommendation.trust_weight_sum
        }
    }
    
    /// Mark recommendation reward as claimed
    public fun mark_reward_claimed(admin: &signer, id: String) acquires Recommendation, GlobalRecommendationRegistry {
        let admin_addr = signer::address_of(admin);
        assert!(common::is_admin(admin_addr), error::permission_denied(1));
        
        let rec_id = common::create_storage_id(id);
        let (exists, owner) = find_recommendation(&rec_id);
        assert!(exists, error::not_found(E_RECOMMENDATION_NOT_FOUND));
        
        let recommendation = borrow_global_mut<Recommendation>(owner);
        recommendation.reward_claimed = true;
    }
    
    /// Convert u64 to string (helper function)
    fun u64_to_string(value: u64): String {
        if (value == 0) {
            return string::utf8(b"0")
        };
        
        let buffer = vector::empty<u8>();
        let temp = value;
        
        while (temp > 0) {
            let digit = ((temp % 10) as u8) + 48; // Convert to ASCII
            vector::push_back(&mut buffer, digit);
            temp = temp / 10;
        };
        
        // Reverse the digits
        let len = vector::length(&buffer);
        let i = 0;
        let j = len - 1;
        
        while (i < j) {
            let temp = *vector::borrow(&buffer, i);
            *vector::borrow_mut(&mut buffer, i) = *vector::borrow(&buffer, j);
            *vector::borrow_mut(&mut buffer, j) = temp;
            i = i + 1;
            j = j - 1;
        };
        
        string::utf8(buffer)
    }
    
    #[test_only]
    public fun setup_test(ctx: &signer) {
        // Initialize necessary modules for testing
        initialize(ctx);
    }
    
    #[test]
    public fun test_create_recommendation() acquires GlobalRecommendationRegistry {
        use std::unit_test;
        
        // Create test account
        let scenario = unit_test::begin(@0x1);
        let sender = unit_test::get_signer_for(@0x42);
        
        // Initialize module
        setup_test(&sender);
        
        // Create a recommendation
        create_recommendation(
            &sender,
            string::utf8(b"restaurant-123"),
            1, // Restaurant category
            40712800, // Latitude (NYC)
            74006000, // Longitude
            false, // North latitude (not negative)
            true,  // West longitude (negative)
            x"0123456789abcdef", // Content hash
            1, // Hash type
            string::utf8(b"Qm...")  // IPFS CID
        );
        
        // Verify recommendation was created
        let global_registry = borrow_global<GlobalRecommendationRegistry>(@omeonechain);
        assert!(vector::length(&global_registry.recommendations) == 1, 0);
        
        unit_test::end(scenario);
    }
}
